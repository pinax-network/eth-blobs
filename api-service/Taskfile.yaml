version: '3'

env:
  # PACKAGE contains the module name from the go.mod file.
  PACKAGE:
    sh: grep 'module' ./go.mod | awk '{print $2}'
  # TAG checks if the current commit is tagged and returns it if that's the case. We use this to set the version flag
  # in the build task (we assume tags are always version tags). If the current commit is not tagged, TAG will be set
  # to 'untagged'.
  TAG:
    sh: git describe --tags --exact-match 2>/dev/null || echo 'untagged'
  # COMMIT contains the full commit hash of the current commit
  COMMIT:
    sh: git log -n 1 --pretty=format:"%H"
  # SHORT_COMMIT contains the abbreviated commit hash of the current commit
  SHORT_COMMIT:
    sh: git log -1 --pretty=format:%h
  # REPOSITORY contains the Github repository name parsed from the remote url
  REPOSITORY:
    sh: basename -s .git $(git remote get-url origin)
  # ORGANISATION contains the Github organisation parsed from the remote url
  ORGANISATION:
    sh: git remote get-url origin | sed -E 's/(.*github\.com[:\/])([^\/]+)\/([^\/]+)(\.git)?/\2/'
  # REGISTRY is set to the container registry to be used to upload Docker images
  REGISTRY: "ghcr.io"
  TEMPLATE_REPOSITORY: "git@github.com:pinax-network/golang-service-template.git"

tasks:

  print:env:
    desc: "Print all environment variables set within this Taskfile."
    silent: true
    cmds:
      - |
        echo -e "PACKAGE: \\t\\t$PACKAGE"
        echo -e "TAG: \\t\\t\\t$TAG"
        echo -e "SHORT_COMMIT: \\t\\t$SHORT_COMMIT"
        echo -e "COMMIT: \\t\\t$COMMIT"
        echo -e "REPOSITORY: \\t\\t$REPOSITORY"
        echo -e "ORGANISATION: \\t\\t$ORGANISATION"
        echo -e "REGISTRY: \\t\\t$REGISTRY"
        echo -e "TEMPLATE_REPOSITORY: \\t$TEMPLATE_REPOSITORY"

  build:
    desc: "Builds the Go binary. You can pass through arguments to the Go compiler by appending --, for example: 'task build -- -tags my_feature'. To set compiler flags use the BUILD_FLAGS environment variable."
    cmds:
      - |
        {{.BUILD_FLAGS}} go build -v {{.CLI_ARGS}} --ldflags='-X "{{.PACKAGE}}/flags.version={{.TAG}}" -X "{{.PACKAGE}}/flags.commit={{.SHORT_COMMIT}}"'

  build:docker:
    desc: "Builds the Docker image"
    silent: true
    cmds:
      - task: build
        vars:
          BUILD_FLAGS: 'GOOS=linux GOARCH=amd64'
      - |
        REPO="{{.REGISTRY}}/{{.ORGANISATION}}/{{.REPOSITORY}}:"
        VERSION={{.SHORT_COMMIT}}
        LATEST=""
        BUILD_TIMESTAMP=$( date '+%F_%H:%M:%S' )

        # in case we are on a tagged version, we use this as version string (instead of the short commit) and we also
        # push that docker image as new 'latest'
        if [[ {{.TAG}} == v* ]]; then
          VERSION="{{.TAG}}"
          LATEST="${REPO}latest"
        fi

        DOCKER_TAG="$REPO$VERSION"

        if [ -z "$LATEST" ]; then
          echo "running: docker build -t \"$DOCKER_TAG\" --build-arg VERSION=\"$VERSION\" --build-arg BUILD_TIMESTAMP=\"$BUILD_TIMESTAMP\" ."
          docker build -t "$DOCKER_TAG" --build-arg VERSION="$VERSION" --build-arg BUILD_TIMESTAMP="$BUILD_TIMESTAMP" .
          docker push $DOCKER_TAG
        else
          echo "running: docker build -t \"$DOCKER_TAG\" -t \"$LATEST\" --build-arg VERSION=\"$VERSION\" --build-arg BUILD_TIMESTAMP=\"$BUILD_TIMESTAMP\" ."
          docker build -t "$DOCKER_TAG" -t "$LATEST" --build-arg VERSION="$VERSION" --build-arg BUILD_TIMESTAMP="$BUILD_TIMESTAMP" .
          docker push $DOCKER_TAG
          docker push $LATEST
        fi

  run:format:
    desc: "Runs Golang's code formatter gofmt"
    cmds:
      - gofmt -s -w .

  run:lint:
    desc: "Runs Golang's linter"
    cmds:
      - golangci-lint run ./...

  start:service:
    desc: "Starts a local instance of the service. You can pass through arguments to the binary by appending --, for example 'task start -- -debug'"
    deps:
      - build
    cmds:
      - ./{{.PACKAGE}} {{.CLI_ARGS}}

  start:docker:
    desc: "Starts a local instance of the service using Docker"
    cmds:
      - docker run
        -p 8080:8080
        -v $(pwd)/config.docker.yaml:/app/config.yaml
        ghcr.io/pinax-network/eth-blobs:latest
        -config /app/config.yaml

  protogen:
    desc: "Builds types from protobuf files"
    cmds:
      - mkdir -p pb
      - protoc --go_out=./pb --go_opt=paths=source_relative --proto_path=../proto pinax/ethereum/blobs/v1/blobs.proto
      - ls pb/pinax/ethereum/blobs/v1/*.pb.go | xargs -n1 -IX bash -c 'sed s/,omitempty// X > X.tmp && mv X{.tmp,}'

  test:format:
    desc: "Checks Golang's code formatter"
    silent: true
    cmds:
      - |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ];
          then exit 1;
        fi

  install:deps:
    desc: "Install Go dependencies such as swaggo to generate docs. The task gets the appropriate version from the go.mod file"
    cmds:
      - go install github.com/swaggo/swag/cmd/swag@{{.SWAGGO_VERSION}}
    vars:
      SWAGGO_VERSION:
        sh: go list -m all | grep github.com/swaggo/swag | awk '{print $2}'

  generate:go:
    desc: "Runs Go generate from the main.go file"
    cmds:
      - go generate

  sync:template:
    desc: "Syncs the template repository. This task will check if there are mergeable changes on template/main and if so create a local branch with those change and create a pull request"
    silent: true
    cmds:
      - |
        echo "Syncing template..."
        REMOTE_ORIGIN=$(git config --get remote.origin.url)
        REMOTE_TEMPLATE=$(git config --get remote.template.url || echo "")

        # we don't run this task on the template repository itself
        if [[ $REMOTE_ORIGIN == *"golang-service-template.git" ]]; then
          echo "We are on the template repository, nothing to do here";
          exit 0;
        fi

        # ensure we don't have uncommitted changes when running this locally
        if [[ ! -z $(git status -s) ]]; then
          echo "You have uncommitted changes, please commit before you sync the template";
          exit 1;
        fi

        # we need to add the template as additional remote if we don't already have it
        if [[ $REMOTE_TEMPLATE == "" ]]; then
          echo "Adding template remote ..."
          git remote add template {{.TEMPLATE_REPOSITORY}}
        fi

        # check if we have changes on template/main by checking if there are changes we could merge
        echo "Checking for changes to template/main..."
        git fetch --all &> /dev/null
        MERGE_RESULT=$(git merge --no-commit --no-ff template/main &>/dev/null || echo "Merge conflicts.")

        if [[ "$MERGE_RESULT" =~ "Already up to date." ]]; then
          echo "No template changes to sync";
          exit 0;
        fi

        # abort the merge, we don't actually want to do that here but just switch to a new branch with the changes later
        echo "Reverting merge..."
        git merge --abort &>/dev/null

        echo "Getting template/main hash..."
        REMOTE_HASH=$(git rev-parse --short template/main)
        TEMPLATE_BRANCH=sync/template_$REMOTE_HASH

        echo "Checking for existing PR branch..."
        if [ `git rev-parse --verify $TEMPLATE_BRANCH 2>/dev/null` ]; then
          echo "Branch to sync template changes from $TEMPLATE_BRANCH already exists.";
          exit 0;
        fi

        echo "Switching to PR branch..."
        git switch -c $TEMPLATE_BRANCH template/main

        # check if we are being run as a Github action and do have a GITHUB_TOKEN env variable set, if so we create a PR
        if [ ! -z "$GITHUB_TOKEN" ]; then
          echo "Creating PR..."
          gh pr create -B main -H $TEMPLATE_BRANCH --title "Sync template repository up to $REMOTE_HASH" --body "The template repository has new changes, please rebase this branch onto your main and then merge the pull request to keep your features up to date."
        else
          echo "Successfully created a new branch with the template changes"
          echo "Run 'git rebase origin/main' to rebase the changes on the latest main branch"
        fi
